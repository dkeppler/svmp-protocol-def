// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: svmp.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "svmp.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace svmp {

void protobuf_ShutdownFile_svmp_2eproto() {
  delete Request::default_instance_;
  delete Response::default_instance_;
  delete Intent::default_instance_;
  delete Intent_Tuple::default_instance_;
  delete Notification::default_instance_;
  delete TouchEvent::default_instance_;
  delete TouchEvent_PointerCoords::default_instance_;
  delete ScreenInfo::default_instance_;
  delete SensorEvent::default_instance_;
  delete SensorSubscribe::default_instance_;
  delete SensorUnsubscribe::default_instance_;
  delete LocationProviderInfo::default_instance_;
  delete LocationProviderStatus::default_instance_;
  delete LocationProviderStatus_Tuple::default_instance_;
  delete LocationProviderEnabled::default_instance_;
  delete LocationUpdate::default_instance_;
  delete LocationRequest::default_instance_;
  delete LocationSubscribe::default_instance_;
  delete LocationUnsubscribe::default_instance_;
  delete LocationResponse::default_instance_;
  delete Authentication::default_instance_;
  delete VideoRequest::default_instance_;
  delete WebRTCMessage::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_svmp_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_svmp_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  Request::default_instance_ = new Request();
  Response::default_instance_ = new Response();
  Intent::default_instance_ = new Intent();
  Intent_Tuple::default_instance_ = new Intent_Tuple();
  Notification::default_instance_ = new Notification();
  TouchEvent::default_instance_ = new TouchEvent();
  TouchEvent_PointerCoords::default_instance_ = new TouchEvent_PointerCoords();
  ScreenInfo::default_instance_ = new ScreenInfo();
  SensorEvent::default_instance_ = new SensorEvent();
  SensorSubscribe::default_instance_ = new SensorSubscribe();
  SensorUnsubscribe::default_instance_ = new SensorUnsubscribe();
  LocationProviderInfo::default_instance_ = new LocationProviderInfo();
  LocationProviderStatus::default_instance_ = new LocationProviderStatus();
  LocationProviderStatus_Tuple::default_instance_ = new LocationProviderStatus_Tuple();
  LocationProviderEnabled::default_instance_ = new LocationProviderEnabled();
  LocationUpdate::default_instance_ = new LocationUpdate();
  LocationRequest::default_instance_ = new LocationRequest();
  LocationSubscribe::default_instance_ = new LocationSubscribe();
  LocationUnsubscribe::default_instance_ = new LocationUnsubscribe();
  LocationResponse::default_instance_ = new LocationResponse();
  Authentication::default_instance_ = new Authentication();
  VideoRequest::default_instance_ = new VideoRequest();
  WebRTCMessage::default_instance_ = new WebRTCMessage();
  Request::default_instance_->InitAsDefaultInstance();
  Response::default_instance_->InitAsDefaultInstance();
  Intent::default_instance_->InitAsDefaultInstance();
  Intent_Tuple::default_instance_->InitAsDefaultInstance();
  Notification::default_instance_->InitAsDefaultInstance();
  TouchEvent::default_instance_->InitAsDefaultInstance();
  TouchEvent_PointerCoords::default_instance_->InitAsDefaultInstance();
  ScreenInfo::default_instance_->InitAsDefaultInstance();
  SensorEvent::default_instance_->InitAsDefaultInstance();
  SensorSubscribe::default_instance_->InitAsDefaultInstance();
  SensorUnsubscribe::default_instance_->InitAsDefaultInstance();
  LocationProviderInfo::default_instance_->InitAsDefaultInstance();
  LocationProviderStatus::default_instance_->InitAsDefaultInstance();
  LocationProviderStatus_Tuple::default_instance_->InitAsDefaultInstance();
  LocationProviderEnabled::default_instance_->InitAsDefaultInstance();
  LocationUpdate::default_instance_->InitAsDefaultInstance();
  LocationRequest::default_instance_->InitAsDefaultInstance();
  LocationSubscribe::default_instance_->InitAsDefaultInstance();
  LocationUnsubscribe::default_instance_->InitAsDefaultInstance();
  LocationResponse::default_instance_->InitAsDefaultInstance();
  Authentication::default_instance_->InitAsDefaultInstance();
  VideoRequest::default_instance_->InitAsDefaultInstance();
  WebRTCMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_svmp_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_svmp_2eproto_once_);
void protobuf_AddDesc_svmp_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_svmp_2eproto_once_,
                 &protobuf_AddDesc_svmp_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_svmp_2eproto {
  StaticDescriptorInitializer_svmp_2eproto() {
    protobuf_AddDesc_svmp_2eproto();
  }
} static_descriptor_initializer_svmp_2eproto_;
#endif
bool IntentAction_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

bool SensorType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}


// ===================================================================

bool Request_RequestType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Request_RequestType Request::USERAUTH;
const Request_RequestType Request::VIDEO_PARAMS;
const Request_RequestType Request::TOUCHEVENT;
const Request_RequestType Request::SENSOREVENT;
const Request_RequestType Request::LOCATION;
const Request_RequestType Request::INTENT;
const Request_RequestType Request::SCREENINFO;
const Request_RequestType Request::VIDEO_START;
const Request_RequestType Request::VIDEO_STOP;
const Request_RequestType Request::WEBRTC;
const Request_RequestType Request::RequestType_MIN;
const Request_RequestType Request::RequestType_MAX;
const int Request::RequestType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Request::kTypeFieldNumber;
const int Request::kAuthenticationFieldNumber;
const int Request::kVideoRequestFieldNumber;
const int Request::kTouchFieldNumber;
const int Request::kSensorFieldNumber;
const int Request::kLocationRequestFieldNumber;
const int Request::kIntentFieldNumber;
const int Request::kWebrtcMsgFieldNumber;
#endif  // !_MSC_VER

Request::Request()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Request::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  authentication_ = const_cast< ::svmp::Authentication*>(
      ::svmp::Authentication::internal_default_instance());
#else
  authentication_ = const_cast< ::svmp::Authentication*>(&::svmp::Authentication::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  videorequest_ = const_cast< ::svmp::VideoRequest*>(
      ::svmp::VideoRequest::internal_default_instance());
#else
  videorequest_ = const_cast< ::svmp::VideoRequest*>(&::svmp::VideoRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  touch_ = const_cast< ::svmp::TouchEvent*>(
      ::svmp::TouchEvent::internal_default_instance());
#else
  touch_ = const_cast< ::svmp::TouchEvent*>(&::svmp::TouchEvent::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  sensor_ = const_cast< ::svmp::SensorEvent*>(
      ::svmp::SensorEvent::internal_default_instance());
#else
  sensor_ = const_cast< ::svmp::SensorEvent*>(&::svmp::SensorEvent::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  locationrequest_ = const_cast< ::svmp::LocationRequest*>(
      ::svmp::LocationRequest::internal_default_instance());
#else
  locationrequest_ = const_cast< ::svmp::LocationRequest*>(&::svmp::LocationRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  intent_ = const_cast< ::svmp::Intent*>(
      ::svmp::Intent::internal_default_instance());
#else
  intent_ = const_cast< ::svmp::Intent*>(&::svmp::Intent::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  webrtcmsg_ = const_cast< ::svmp::WebRTCMessage*>(
      ::svmp::WebRTCMessage::internal_default_instance());
#else
  webrtcmsg_ = const_cast< ::svmp::WebRTCMessage*>(&::svmp::WebRTCMessage::default_instance());
#endif
}

Request::Request(const Request& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Request::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  authentication_ = NULL;
  videorequest_ = NULL;
  touch_ = NULL;
  sensor_ = NULL;
  locationrequest_ = NULL;
  intent_ = NULL;
  webrtcmsg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request::~Request() {
  SharedDtor();
}

void Request::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete authentication_;
    delete videorequest_;
    delete touch_;
    delete sensor_;
    delete locationrequest_;
    delete intent_;
    delete webrtcmsg_;
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Request& Request::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_svmp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_svmp_2eproto();
#endif
  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New() const {
  return new Request;
}

void Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_authentication()) {
      if (authentication_ != NULL) authentication_->::svmp::Authentication::Clear();
    }
    if (has_videorequest()) {
      if (videorequest_ != NULL) videorequest_->::svmp::VideoRequest::Clear();
    }
    if (has_touch()) {
      if (touch_ != NULL) touch_->::svmp::TouchEvent::Clear();
    }
    if (has_sensor()) {
      if (sensor_ != NULL) sensor_->::svmp::SensorEvent::Clear();
    }
    if (has_locationrequest()) {
      if (locationrequest_ != NULL) locationrequest_->::svmp::LocationRequest::Clear();
    }
    if (has_intent()) {
      if (intent_ != NULL) intent_->::svmp::Intent::Clear();
    }
    if (has_webrtcmsg()) {
      if (webrtcmsg_ != NULL) webrtcmsg_->::svmp::WebRTCMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .svmp.Request.RequestType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::svmp::Request_RequestType_IsValid(value)) {
            set_type(static_cast< ::svmp::Request_RequestType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_authentication;
        break;
      }

      // optional .svmp.Authentication authentication = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_authentication:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_authentication()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_videoRequest;
        break;
      }

      // optional .svmp.VideoRequest videoRequest = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_videoRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_videorequest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_touch;
        break;
      }

      // optional .svmp.TouchEvent touch = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_touch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_touch()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_sensor;
        break;
      }

      // optional .svmp.SensorEvent sensor = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sensor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sensor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_locationRequest;
        break;
      }

      // optional .svmp.LocationRequest locationRequest = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_locationRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_locationrequest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_intent;
        break;
      }

      // optional .svmp.Intent intent = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_intent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_intent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_webrtcMsg;
        break;
      }

      // optional .svmp.WebRTCMessage webrtcMsg = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_webrtcMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_webrtcmsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .svmp.Request.RequestType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .svmp.Authentication authentication = 2;
  if (has_authentication()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->authentication(), output);
  }

  // optional .svmp.VideoRequest videoRequest = 3;
  if (has_videorequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->videorequest(), output);
  }

  // optional .svmp.TouchEvent touch = 4;
  if (has_touch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->touch(), output);
  }

  // optional .svmp.SensorEvent sensor = 5;
  if (has_sensor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->sensor(), output);
  }

  // optional .svmp.LocationRequest locationRequest = 6;
  if (has_locationrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->locationrequest(), output);
  }

  // optional .svmp.Intent intent = 7;
  if (has_intent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->intent(), output);
  }

  // optional .svmp.WebRTCMessage webrtcMsg = 9;
  if (has_webrtcmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->webrtcmsg(), output);
  }

}

int Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .svmp.Request.RequestType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .svmp.Authentication authentication = 2;
    if (has_authentication()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->authentication());
    }

    // optional .svmp.VideoRequest videoRequest = 3;
    if (has_videorequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->videorequest());
    }

    // optional .svmp.TouchEvent touch = 4;
    if (has_touch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->touch());
    }

    // optional .svmp.SensorEvent sensor = 5;
    if (has_sensor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sensor());
    }

    // optional .svmp.LocationRequest locationRequest = 6;
    if (has_locationrequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->locationrequest());
    }

    // optional .svmp.Intent intent = 7;
    if (has_intent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->intent());
    }

    // optional .svmp.WebRTCMessage webrtcMsg = 9;
    if (has_webrtcmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->webrtcmsg());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Request*>(&from));
}

void Request::MergeFrom(const Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_authentication()) {
      mutable_authentication()->::svmp::Authentication::MergeFrom(from.authentication());
    }
    if (from.has_videorequest()) {
      mutable_videorequest()->::svmp::VideoRequest::MergeFrom(from.videorequest());
    }
    if (from.has_touch()) {
      mutable_touch()->::svmp::TouchEvent::MergeFrom(from.touch());
    }
    if (from.has_sensor()) {
      mutable_sensor()->::svmp::SensorEvent::MergeFrom(from.sensor());
    }
    if (from.has_locationrequest()) {
      mutable_locationrequest()->::svmp::LocationRequest::MergeFrom(from.locationrequest());
    }
    if (from.has_intent()) {
      mutable_intent()->::svmp::Intent::MergeFrom(from.intent());
    }
    if (from.has_webrtcmsg()) {
      mutable_webrtcmsg()->::svmp::WebRTCMessage::MergeFrom(from.webrtcmsg());
    }
  }
}

void Request::CopyFrom(const Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_authentication()) {
    if (!this->authentication().IsInitialized()) return false;
  }
  if (has_videorequest()) {
    if (!this->videorequest().IsInitialized()) return false;
  }
  if (has_touch()) {
    if (!this->touch().IsInitialized()) return false;
  }
  if (has_sensor()) {
    if (!this->sensor().IsInitialized()) return false;
  }
  if (has_locationrequest()) {
    if (!this->locationrequest().IsInitialized()) return false;
  }
  if (has_intent()) {
    if (!this->intent().IsInitialized()) return false;
  }
  if (has_webrtcmsg()) {
    if (!this->webrtcmsg().IsInitialized()) return false;
  }
  return true;
}

void Request::Swap(Request* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(authentication_, other->authentication_);
    std::swap(videorequest_, other->videorequest_);
    std::swap(touch_, other->touch_);
    std::swap(sensor_, other->sensor_);
    std::swap(locationrequest_, other->locationrequest_);
    std::swap(intent_, other->intent_);
    std::swap(webrtcmsg_, other->webrtcmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Request::GetTypeName() const {
  return "svmp.Request";
}


// ===================================================================

bool Response_ResponseType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Response_ResponseType Response::ERROR;
const Response_ResponseType Response::AUTHOK;
const Response_ResponseType Response::VMREADY;
const Response_ResponseType Response::SCREENINFO;
const Response_ResponseType Response::WEBRTC;
const Response_ResponseType Response::INTENT;
const Response_ResponseType Response::NOTIFICATION;
const Response_ResponseType Response::LOCATION;
const Response_ResponseType Response::VIDEOSTART;
const Response_ResponseType Response::VIDEOSTOP;
const Response_ResponseType Response::VIDEOPAUSE;
const Response_ResponseType Response::ResponseType_MIN;
const Response_ResponseType Response::ResponseType_MAX;
const int Response::ResponseType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Response::kTypeFieldNumber;
const int Response::kMessageFieldNumber;
const int Response::kIntentFieldNumber;
const int Response::kNotificationFieldNumber;
const int Response::kLocationResponseFieldNumber;
const int Response::kScreenInfoFieldNumber;
const int Response::kWebrtcMsgFieldNumber;
#endif  // !_MSC_VER

Response::Response()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Response::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  intent_ = const_cast< ::svmp::Intent*>(
      ::svmp::Intent::internal_default_instance());
#else
  intent_ = const_cast< ::svmp::Intent*>(&::svmp::Intent::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  notification_ = const_cast< ::svmp::Notification*>(
      ::svmp::Notification::internal_default_instance());
#else
  notification_ = const_cast< ::svmp::Notification*>(&::svmp::Notification::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  locationresponse_ = const_cast< ::svmp::LocationResponse*>(
      ::svmp::LocationResponse::internal_default_instance());
#else
  locationresponse_ = const_cast< ::svmp::LocationResponse*>(&::svmp::LocationResponse::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  screen_info_ = const_cast< ::svmp::ScreenInfo*>(
      ::svmp::ScreenInfo::internal_default_instance());
#else
  screen_info_ = const_cast< ::svmp::ScreenInfo*>(&::svmp::ScreenInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  webrtcmsg_ = const_cast< ::svmp::WebRTCMessage*>(
      ::svmp::WebRTCMessage::internal_default_instance());
#else
  webrtcmsg_ = const_cast< ::svmp::WebRTCMessage*>(&::svmp::WebRTCMessage::default_instance());
#endif
}

Response::Response(const Response& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Response::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  intent_ = NULL;
  notification_ = NULL;
  locationresponse_ = NULL;
  screen_info_ = NULL;
  webrtcmsg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response::~Response() {
  SharedDtor();
}

void Response::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete intent_;
    delete notification_;
    delete locationresponse_;
    delete screen_info_;
    delete webrtcmsg_;
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Response& Response::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_svmp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_svmp_2eproto();
#endif
  return *default_instance_;
}

Response* Response::default_instance_ = NULL;

Response* Response::New() const {
  return new Response;
}

void Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
    if (has_intent()) {
      if (intent_ != NULL) intent_->::svmp::Intent::Clear();
    }
    if (has_notification()) {
      if (notification_ != NULL) notification_->::svmp::Notification::Clear();
    }
    if (has_locationresponse()) {
      if (locationresponse_ != NULL) locationresponse_->::svmp::LocationResponse::Clear();
    }
    if (has_screen_info()) {
      if (screen_info_ != NULL) screen_info_->::svmp::ScreenInfo::Clear();
    }
    if (has_webrtcmsg()) {
      if (webrtcmsg_ != NULL) webrtcmsg_->::svmp::WebRTCMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .svmp.Response.ResponseType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::svmp::Response_ResponseType_IsValid(value)) {
            set_type(static_cast< ::svmp::Response_ResponseType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional string message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_intent;
        break;
      }

      // optional .svmp.Intent intent = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_intent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_intent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_notification;
        break;
      }

      // optional .svmp.Notification notification = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notification:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_notification()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_locationResponse;
        break;
      }

      // optional .svmp.LocationResponse locationResponse = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_locationResponse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_locationresponse()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_screen_info;
        break;
      }

      // optional .svmp.ScreenInfo screen_info = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_screen_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_screen_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_webrtcMsg;
        break;
      }

      // optional .svmp.WebRTCMessage webrtcMsg = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_webrtcMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_webrtcmsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .svmp.Response.ResponseType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->message(), output);
  }

  // optional .svmp.Intent intent = 4;
  if (has_intent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->intent(), output);
  }

  // optional .svmp.Notification notification = 5;
  if (has_notification()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->notification(), output);
  }

  // optional .svmp.LocationResponse locationResponse = 6;
  if (has_locationresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->locationresponse(), output);
  }

  // optional .svmp.ScreenInfo screen_info = 16;
  if (has_screen_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      16, this->screen_info(), output);
  }

  // optional .svmp.WebRTCMessage webrtcMsg = 17;
  if (has_webrtcmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      17, this->webrtcmsg(), output);
  }

}

int Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .svmp.Response.ResponseType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional .svmp.Intent intent = 4;
    if (has_intent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->intent());
    }

    // optional .svmp.Notification notification = 5;
    if (has_notification()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->notification());
    }

    // optional .svmp.LocationResponse locationResponse = 6;
    if (has_locationresponse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->locationresponse());
    }

    // optional .svmp.ScreenInfo screen_info = 16;
    if (has_screen_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->screen_info());
    }

    // optional .svmp.WebRTCMessage webrtcMsg = 17;
    if (has_webrtcmsg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->webrtcmsg());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Response*>(&from));
}

void Response::MergeFrom(const Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_intent()) {
      mutable_intent()->::svmp::Intent::MergeFrom(from.intent());
    }
    if (from.has_notification()) {
      mutable_notification()->::svmp::Notification::MergeFrom(from.notification());
    }
    if (from.has_locationresponse()) {
      mutable_locationresponse()->::svmp::LocationResponse::MergeFrom(from.locationresponse());
    }
    if (from.has_screen_info()) {
      mutable_screen_info()->::svmp::ScreenInfo::MergeFrom(from.screen_info());
    }
    if (from.has_webrtcmsg()) {
      mutable_webrtcmsg()->::svmp::WebRTCMessage::MergeFrom(from.webrtcmsg());
    }
  }
}

void Response::CopyFrom(const Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_intent()) {
    if (!this->intent().IsInitialized()) return false;
  }
  if (has_notification()) {
    if (!this->notification().IsInitialized()) return false;
  }
  if (has_locationresponse()) {
    if (!this->locationresponse().IsInitialized()) return false;
  }
  if (has_screen_info()) {
    if (!this->screen_info().IsInitialized()) return false;
  }
  if (has_webrtcmsg()) {
    if (!this->webrtcmsg().IsInitialized()) return false;
  }
  return true;
}

void Response::Swap(Response* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(message_, other->message_);
    std::swap(intent_, other->intent_);
    std::swap(notification_, other->notification_);
    std::swap(locationresponse_, other->locationresponse_);
    std::swap(screen_info_, other->screen_info_);
    std::swap(webrtcmsg_, other->webrtcmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Response::GetTypeName() const {
  return "svmp.Response";
}


// ===================================================================

#ifndef _MSC_VER
const int Intent_Tuple::kKeyFieldNumber;
const int Intent_Tuple::kValueFieldNumber;
#endif  // !_MSC_VER

Intent_Tuple::Intent_Tuple()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Intent_Tuple::InitAsDefaultInstance() {
}

Intent_Tuple::Intent_Tuple(const Intent_Tuple& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Intent_Tuple::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Intent_Tuple::~Intent_Tuple() {
  SharedDtor();
}

void Intent_Tuple::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Intent_Tuple::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Intent_Tuple& Intent_Tuple::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_svmp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_svmp_2eproto();
#endif
  return *default_instance_;
}

Intent_Tuple* Intent_Tuple::default_instance_ = NULL;

Intent_Tuple* Intent_Tuple::New() const {
  return new Intent_Tuple;
}

void Intent_Tuple::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Intent_Tuple::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Intent_Tuple::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

}

int Intent_Tuple::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Intent_Tuple::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Intent_Tuple*>(&from));
}

void Intent_Tuple::MergeFrom(const Intent_Tuple& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
}

void Intent_Tuple::CopyFrom(const Intent_Tuple& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Intent_Tuple::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Intent_Tuple::Swap(Intent_Tuple* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Intent_Tuple::GetTypeName() const {
  return "svmp.Intent.Tuple";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Intent::kActionFieldNumber;
const int Intent::kExtrasFieldNumber;
const int Intent::kDataFieldNumber;
const int Intent::kFlagsFieldNumber;
const int Intent::kCategoriesFieldNumber;
#endif  // !_MSC_VER

Intent::Intent()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Intent::InitAsDefaultInstance() {
}

Intent::Intent(const Intent& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Intent::SharedCtor() {
  _cached_size_ = 0;
  action_ = 1;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Intent::~Intent() {
  SharedDtor();
}

void Intent::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Intent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Intent& Intent::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_svmp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_svmp_2eproto();
#endif
  return *default_instance_;
}

Intent* Intent::default_instance_ = NULL;

Intent* Intent::New() const {
  return new Intent;
}

void Intent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    action_ = 1;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  extras_.Clear();
  flags_.Clear();
  categories_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Intent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .svmp.IntentAction action = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::svmp::IntentAction_IsValid(value)) {
            set_action(static_cast< ::svmp::IntentAction >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_extras;
        break;
      }

      // repeated .svmp.Intent.Tuple extras = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extras:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_extras()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_extras;
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional string data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_flags;
        break;
      }

      // repeated int32 flags = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_flags())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_flags())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_flags;
        if (input->ExpectTag(42)) goto parse_categories;
        break;
      }

      // repeated string categories = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_categories:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_categories()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_categories;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Intent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .svmp.IntentAction action = 1;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->action(), output);
  }

  // repeated .svmp.Intent.Tuple extras = 2;
  for (int i = 0; i < this->extras_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->extras(i), output);
  }

  // optional string data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->data(), output);
  }

  // repeated int32 flags = 4;
  for (int i = 0; i < this->flags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->flags(i), output);
  }

  // repeated string categories = 5;
  for (int i = 0; i < this->categories_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->categories(i), output);
  }

}

int Intent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .svmp.IntentAction action = 1;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

    // optional string data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

  }
  // repeated .svmp.Intent.Tuple extras = 2;
  total_size += 1 * this->extras_size();
  for (int i = 0; i < this->extras_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->extras(i));
  }

  // repeated int32 flags = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->flags_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->flags(i));
    }
    total_size += 1 * this->flags_size() + data_size;
  }

  // repeated string categories = 5;
  total_size += 1 * this->categories_size();
  for (int i = 0; i < this->categories_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->categories(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Intent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Intent*>(&from));
}

void Intent::MergeFrom(const Intent& from) {
  GOOGLE_CHECK_NE(&from, this);
  extras_.MergeFrom(from.extras_);
  flags_.MergeFrom(from.flags_);
  categories_.MergeFrom(from.categories_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
}

void Intent::CopyFrom(const Intent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Intent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < extras_size(); i++) {
    if (!this->extras(i).IsInitialized()) return false;
  }
  return true;
}

void Intent::Swap(Intent* other) {
  if (other != this) {
    std::swap(action_, other->action_);
    extras_.Swap(&other->extras_);
    std::swap(data_, other->data_);
    flags_.Swap(&other->flags_);
    categories_.Swap(&other->categories_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Intent::GetTypeName() const {
  return "svmp.Intent";
}


// ===================================================================

#ifndef _MSC_VER
const int Notification::kContentTitleFieldNumber;
const int Notification::kContentTextFieldNumber;
const int Notification::kSmallIconFieldNumber;
const int Notification::kLargeIconFieldNumber;
#endif  // !_MSC_VER

Notification::Notification()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Notification::InitAsDefaultInstance() {
}

Notification::Notification(const Notification& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Notification::SharedCtor() {
  _cached_size_ = 0;
  contenttitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  contenttext_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  smallicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  largeicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Notification::~Notification() {
  SharedDtor();
}

void Notification::SharedDtor() {
  if (contenttitle_ != &::google::protobuf::internal::kEmptyString) {
    delete contenttitle_;
  }
  if (contenttext_ != &::google::protobuf::internal::kEmptyString) {
    delete contenttext_;
  }
  if (smallicon_ != &::google::protobuf::internal::kEmptyString) {
    delete smallicon_;
  }
  if (largeicon_ != &::google::protobuf::internal::kEmptyString) {
    delete largeicon_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Notification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Notification& Notification::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_svmp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_svmp_2eproto();
#endif
  return *default_instance_;
}

Notification* Notification::default_instance_ = NULL;

Notification* Notification::New() const {
  return new Notification;
}

void Notification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_contenttitle()) {
      if (contenttitle_ != &::google::protobuf::internal::kEmptyString) {
        contenttitle_->clear();
      }
    }
    if (has_contenttext()) {
      if (contenttext_ != &::google::protobuf::internal::kEmptyString) {
        contenttext_->clear();
      }
    }
    if (has_smallicon()) {
      if (smallicon_ != &::google::protobuf::internal::kEmptyString) {
        smallicon_->clear();
      }
    }
    if (has_largeicon()) {
      if (largeicon_ != &::google::protobuf::internal::kEmptyString) {
        largeicon_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string contentTitle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contenttitle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_contentText;
        break;
      }

      // required string contentText = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contentText:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contenttext()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_smallIcon;
        break;
      }

      // required bytes smallIcon = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_smallIcon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_smallicon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_largeIcon;
        break;
      }

      // optional bytes largeIcon = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_largeIcon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_largeicon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string contentTitle = 1;
  if (has_contenttitle()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->contenttitle(), output);
  }

  // required string contentText = 2;
  if (has_contenttext()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->contenttext(), output);
  }

  // required bytes smallIcon = 3;
  if (has_smallicon()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->smallicon(), output);
  }

  // optional bytes largeIcon = 4;
  if (has_largeicon()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->largeicon(), output);
  }

}

int Notification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string contentTitle = 1;
    if (has_contenttitle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contenttitle());
    }

    // required string contentText = 2;
    if (has_contenttext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contenttext());
    }

    // required bytes smallIcon = 3;
    if (has_smallicon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->smallicon());
    }

    // optional bytes largeIcon = 4;
    if (has_largeicon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->largeicon());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Notification::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Notification*>(&from));
}

void Notification::MergeFrom(const Notification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_contenttitle()) {
      set_contenttitle(from.contenttitle());
    }
    if (from.has_contenttext()) {
      set_contenttext(from.contenttext());
    }
    if (from.has_smallicon()) {
      set_smallicon(from.smallicon());
    }
    if (from.has_largeicon()) {
      set_largeicon(from.largeicon());
    }
  }
}

void Notification::CopyFrom(const Notification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Notification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Notification::Swap(Notification* other) {
  if (other != this) {
    std::swap(contenttitle_, other->contenttitle_);
    std::swap(contenttext_, other->contenttext_);
    std::swap(smallicon_, other->smallicon_);
    std::swap(largeicon_, other->largeicon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Notification::GetTypeName() const {
  return "svmp.Notification";
}


// ===================================================================

#ifndef _MSC_VER
const int TouchEvent_PointerCoords::kIdFieldNumber;
const int TouchEvent_PointerCoords::kXFieldNumber;
const int TouchEvent_PointerCoords::kYFieldNumber;
#endif  // !_MSC_VER

TouchEvent_PointerCoords::TouchEvent_PointerCoords()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TouchEvent_PointerCoords::InitAsDefaultInstance() {
}

TouchEvent_PointerCoords::TouchEvent_PointerCoords(const TouchEvent_PointerCoords& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TouchEvent_PointerCoords::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TouchEvent_PointerCoords::~TouchEvent_PointerCoords() {
  SharedDtor();
}

void TouchEvent_PointerCoords::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TouchEvent_PointerCoords::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TouchEvent_PointerCoords& TouchEvent_PointerCoords::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_svmp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_svmp_2eproto();
#endif
  return *default_instance_;
}

TouchEvent_PointerCoords* TouchEvent_PointerCoords::default_instance_ = NULL;

TouchEvent_PointerCoords* TouchEvent_PointerCoords::New() const {
  return new TouchEvent_PointerCoords;
}

void TouchEvent_PointerCoords::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TouchEvent_PointerCoords::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_x;
        break;
      }

      // required float x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_y;
        break;
      }

      // required float y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TouchEvent_PointerCoords::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required float x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->x(), output);
  }

  // required float y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->y(), output);
  }

}

int TouchEvent_PointerCoords::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required float x = 2;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 3;
    if (has_y()) {
      total_size += 1 + 4;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TouchEvent_PointerCoords::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TouchEvent_PointerCoords*>(&from));
}

void TouchEvent_PointerCoords::MergeFrom(const TouchEvent_PointerCoords& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
}

void TouchEvent_PointerCoords::CopyFrom(const TouchEvent_PointerCoords& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TouchEvent_PointerCoords::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void TouchEvent_PointerCoords::Swap(TouchEvent_PointerCoords* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TouchEvent_PointerCoords::GetTypeName() const {
  return "svmp.TouchEvent.PointerCoords";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TouchEvent::kActionFieldNumber;
const int TouchEvent::kItemsFieldNumber;
#endif  // !_MSC_VER

TouchEvent::TouchEvent()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TouchEvent::InitAsDefaultInstance() {
}

TouchEvent::TouchEvent(const TouchEvent& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TouchEvent::SharedCtor() {
  _cached_size_ = 0;
  action_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TouchEvent::~TouchEvent() {
  SharedDtor();
}

void TouchEvent::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TouchEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TouchEvent& TouchEvent::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_svmp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_svmp_2eproto();
#endif
  return *default_instance_;
}

TouchEvent* TouchEvent::default_instance_ = NULL;

TouchEvent* TouchEvent::New() const {
  return new TouchEvent;
}

void TouchEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    action_ = 0;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TouchEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 action = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_)));
          set_has_action();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }

      // repeated .svmp.TouchEvent.PointerCoords items = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TouchEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 action = 1;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->action(), output);
  }

  // repeated .svmp.TouchEvent.PointerCoords items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->items(i), output);
  }

}

int TouchEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 action = 1;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action());
    }

  }
  // repeated .svmp.TouchEvent.PointerCoords items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TouchEvent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TouchEvent*>(&from));
}

void TouchEvent::MergeFrom(const TouchEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action()) {
      set_action(from.action());
    }
  }
}

void TouchEvent::CopyFrom(const TouchEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TouchEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void TouchEvent::Swap(TouchEvent* other) {
  if (other != this) {
    std::swap(action_, other->action_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TouchEvent::GetTypeName() const {
  return "svmp.TouchEvent";
}


// ===================================================================

#ifndef _MSC_VER
const int ScreenInfo::kXFieldNumber;
const int ScreenInfo::kYFieldNumber;
#endif  // !_MSC_VER

ScreenInfo::ScreenInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ScreenInfo::InitAsDefaultInstance() {
}

ScreenInfo::ScreenInfo(const ScreenInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ScreenInfo::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScreenInfo::~ScreenInfo() {
  SharedDtor();
}

void ScreenInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ScreenInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ScreenInfo& ScreenInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_svmp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_svmp_2eproto();
#endif
  return *default_instance_;
}

ScreenInfo* ScreenInfo::default_instance_ = NULL;

ScreenInfo* ScreenInfo::New() const {
  return new ScreenInfo;
}

void ScreenInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ScreenInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // required int32 y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ScreenInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // required int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

}

int ScreenInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // required int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScreenInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ScreenInfo*>(&from));
}

void ScreenInfo::MergeFrom(const ScreenInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
}

void ScreenInfo::CopyFrom(const ScreenInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScreenInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ScreenInfo::Swap(ScreenInfo* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ScreenInfo::GetTypeName() const {
  return "svmp.ScreenInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int SensorEvent::kTypeFieldNumber;
const int SensorEvent::kAccuracyFieldNumber;
const int SensorEvent::kTimestampFieldNumber;
const int SensorEvent::kValuesFieldNumber;
#endif  // !_MSC_VER

SensorEvent::SensorEvent()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SensorEvent::InitAsDefaultInstance() {
}

SensorEvent::SensorEvent(const SensorEvent& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SensorEvent::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  accuracy_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SensorEvent::~SensorEvent() {
  SharedDtor();
}

void SensorEvent::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SensorEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SensorEvent& SensorEvent::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_svmp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_svmp_2eproto();
#endif
  return *default_instance_;
}

SensorEvent* SensorEvent::default_instance_ = NULL;

SensorEvent* SensorEvent::New() const {
  return new SensorEvent;
}

void SensorEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    accuracy_ = 0;
    timestamp_ = GOOGLE_LONGLONG(0);
  }
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SensorEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .svmp.SensorType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::svmp::SensorType_IsValid(value)) {
            set_type(static_cast< ::svmp::SensorType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_accuracy;
        break;
      }

      // required int32 accuracy = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accuracy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &accuracy_)));
          set_has_accuracy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_timestamp;
        break;
      }

      // required int64 timestamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_values;
        break;
      }

      // repeated float values = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 37, input, this->mutable_values())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_values())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_values;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SensorEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .svmp.SensorType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required int32 accuracy = 2;
  if (has_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->accuracy(), output);
  }

  // required int64 timestamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->timestamp(), output);
  }

  // repeated float values = 4;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      4, this->values(i), output);
  }

}

int SensorEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .svmp.SensorType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int32 accuracy = 2;
    if (has_accuracy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->accuracy());
    }

    // required int64 timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

  }
  // repeated float values = 4;
  {
    int data_size = 0;
    data_size = 4 * this->values_size();
    total_size += 1 * this->values_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SensorEvent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SensorEvent*>(&from));
}

void SensorEvent::MergeFrom(const SensorEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_accuracy()) {
      set_accuracy(from.accuracy());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
}

void SensorEvent::CopyFrom(const SensorEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SensorEvent::Swap(SensorEvent* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(accuracy_, other->accuracy_);
    std::swap(timestamp_, other->timestamp_);
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SensorEvent::GetTypeName() const {
  return "svmp.SensorEvent";
}


// ===================================================================

#ifndef _MSC_VER
const int SensorSubscribe::kTypeFieldNumber;
const int SensorSubscribe::kFrequencyFieldNumber;
#endif  // !_MSC_VER

SensorSubscribe::SensorSubscribe()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SensorSubscribe::InitAsDefaultInstance() {
}

SensorSubscribe::SensorSubscribe(const SensorSubscribe& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SensorSubscribe::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  frequency_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SensorSubscribe::~SensorSubscribe() {
  SharedDtor();
}

void SensorSubscribe::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SensorSubscribe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SensorSubscribe& SensorSubscribe::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_svmp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_svmp_2eproto();
#endif
  return *default_instance_;
}

SensorSubscribe* SensorSubscribe::default_instance_ = NULL;

SensorSubscribe* SensorSubscribe::New() const {
  return new SensorSubscribe;
}

void SensorSubscribe::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    frequency_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SensorSubscribe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .svmp.SensorType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::svmp::SensorType_IsValid(value)) {
            set_type(static_cast< ::svmp::SensorType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_frequency;
        break;
      }

      // optional int32 frequency = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frequency_)));
          set_has_frequency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SensorSubscribe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .svmp.SensorType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int32 frequency = 2;
  if (has_frequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->frequency(), output);
  }

}

int SensorSubscribe::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .svmp.SensorType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 frequency = 2;
    if (has_frequency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frequency());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SensorSubscribe::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SensorSubscribe*>(&from));
}

void SensorSubscribe::MergeFrom(const SensorSubscribe& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_frequency()) {
      set_frequency(from.frequency());
    }
  }
}

void SensorSubscribe::CopyFrom(const SensorSubscribe& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorSubscribe::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SensorSubscribe::Swap(SensorSubscribe* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(frequency_, other->frequency_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SensorSubscribe::GetTypeName() const {
  return "svmp.SensorSubscribe";
}


// ===================================================================

#ifndef _MSC_VER
const int SensorUnsubscribe::kTypeFieldNumber;
#endif  // !_MSC_VER

SensorUnsubscribe::SensorUnsubscribe()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SensorUnsubscribe::InitAsDefaultInstance() {
}

SensorUnsubscribe::SensorUnsubscribe(const SensorUnsubscribe& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SensorUnsubscribe::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SensorUnsubscribe::~SensorUnsubscribe() {
  SharedDtor();
}

void SensorUnsubscribe::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SensorUnsubscribe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SensorUnsubscribe& SensorUnsubscribe::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_svmp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_svmp_2eproto();
#endif
  return *default_instance_;
}

SensorUnsubscribe* SensorUnsubscribe::default_instance_ = NULL;

SensorUnsubscribe* SensorUnsubscribe::New() const {
  return new SensorUnsubscribe;
}

void SensorUnsubscribe::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SensorUnsubscribe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .svmp.SensorType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::svmp::SensorType_IsValid(value)) {
            set_type(static_cast< ::svmp::SensorType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SensorUnsubscribe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .svmp.SensorType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

}

int SensorUnsubscribe::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .svmp.SensorType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SensorUnsubscribe::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SensorUnsubscribe*>(&from));
}

void SensorUnsubscribe::MergeFrom(const SensorUnsubscribe& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
}

void SensorUnsubscribe::CopyFrom(const SensorUnsubscribe& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorUnsubscribe::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SensorUnsubscribe::Swap(SensorUnsubscribe* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SensorUnsubscribe::GetTypeName() const {
  return "svmp.SensorUnsubscribe";
}


// ===================================================================

#ifndef _MSC_VER
const int LocationProviderInfo::kProviderFieldNumber;
const int LocationProviderInfo::kRequiresNetworkFieldNumber;
const int LocationProviderInfo::kRequiresSatelliteFieldNumber;
const int LocationProviderInfo::kRequiresCellFieldNumber;
const int LocationProviderInfo::kHasMonetaryCostFieldNumber;
const int LocationProviderInfo::kSupportsAltitudeFieldNumber;
const int LocationProviderInfo::kSupportsSpeedFieldNumber;
const int LocationProviderInfo::kSupportsBearingFieldNumber;
const int LocationProviderInfo::kPowerRequirementFieldNumber;
const int LocationProviderInfo::kAccuracyFieldNumber;
#endif  // !_MSC_VER

LocationProviderInfo::LocationProviderInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void LocationProviderInfo::InitAsDefaultInstance() {
}

LocationProviderInfo::LocationProviderInfo(const LocationProviderInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void LocationProviderInfo::SharedCtor() {
  _cached_size_ = 0;
  provider_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  requiresnetwork_ = false;
  requiressatellite_ = false;
  requirescell_ = false;
  hasmonetarycost_ = false;
  supportsaltitude_ = false;
  supportsspeed_ = false;
  supportsbearing_ = false;
  powerrequirement_ = 0;
  accuracy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LocationProviderInfo::~LocationProviderInfo() {
  SharedDtor();
}

void LocationProviderInfo::SharedDtor() {
  if (provider_ != &::google::protobuf::internal::kEmptyString) {
    delete provider_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LocationProviderInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LocationProviderInfo& LocationProviderInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_svmp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_svmp_2eproto();
#endif
  return *default_instance_;
}

LocationProviderInfo* LocationProviderInfo::default_instance_ = NULL;

LocationProviderInfo* LocationProviderInfo::New() const {
  return new LocationProviderInfo;
}

void LocationProviderInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_provider()) {
      if (provider_ != &::google::protobuf::internal::kEmptyString) {
        provider_->clear();
      }
    }
    requiresnetwork_ = false;
    requiressatellite_ = false;
    requirescell_ = false;
    hasmonetarycost_ = false;
    supportsaltitude_ = false;
    supportsspeed_ = false;
    supportsbearing_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    powerrequirement_ = 0;
    accuracy_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool LocationProviderInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string provider = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_provider()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_requiresNetwork;
        break;
      }

      // required bool requiresNetwork = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_requiresNetwork:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &requiresnetwork_)));
          set_has_requiresnetwork();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_requiresSatellite;
        break;
      }

      // required bool requiresSatellite = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_requiresSatellite:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &requiressatellite_)));
          set_has_requiressatellite();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_requiresCell;
        break;
      }

      // required bool requiresCell = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_requiresCell:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &requirescell_)));
          set_has_requirescell();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hasMonetaryCost;
        break;
      }

      // required bool hasMonetaryCost = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasMonetaryCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasmonetarycost_)));
          set_has_hasmonetarycost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_supportsAltitude;
        break;
      }

      // required bool supportsAltitude = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_supportsAltitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &supportsaltitude_)));
          set_has_supportsaltitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_supportsSpeed;
        break;
      }

      // required bool supportsSpeed = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_supportsSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &supportsspeed_)));
          set_has_supportsspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_supportsBearing;
        break;
      }

      // required bool supportsBearing = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_supportsBearing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &supportsbearing_)));
          set_has_supportsbearing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_powerRequirement;
        break;
      }

      // required int32 powerRequirement = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_powerRequirement:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &powerrequirement_)));
          set_has_powerrequirement();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_accuracy;
        break;
      }

      // required int32 accuracy = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accuracy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &accuracy_)));
          set_has_accuracy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LocationProviderInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string provider = 1;
  if (has_provider()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->provider(), output);
  }

  // required bool requiresNetwork = 2;
  if (has_requiresnetwork()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->requiresnetwork(), output);
  }

  // required bool requiresSatellite = 3;
  if (has_requiressatellite()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->requiressatellite(), output);
  }

  // required bool requiresCell = 4;
  if (has_requirescell()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->requirescell(), output);
  }

  // required bool hasMonetaryCost = 5;
  if (has_hasmonetarycost()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->hasmonetarycost(), output);
  }

  // required bool supportsAltitude = 6;
  if (has_supportsaltitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->supportsaltitude(), output);
  }

  // required bool supportsSpeed = 7;
  if (has_supportsspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->supportsspeed(), output);
  }

  // required bool supportsBearing = 8;
  if (has_supportsbearing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->supportsbearing(), output);
  }

  // required int32 powerRequirement = 9;
  if (has_powerrequirement()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->powerrequirement(), output);
  }

  // required int32 accuracy = 10;
  if (has_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->accuracy(), output);
  }

}

int LocationProviderInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string provider = 1;
    if (has_provider()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->provider());
    }

    // required bool requiresNetwork = 2;
    if (has_requiresnetwork()) {
      total_size += 1 + 1;
    }

    // required bool requiresSatellite = 3;
    if (has_requiressatellite()) {
      total_size += 1 + 1;
    }

    // required bool requiresCell = 4;
    if (has_requirescell()) {
      total_size += 1 + 1;
    }

    // required bool hasMonetaryCost = 5;
    if (has_hasmonetarycost()) {
      total_size += 1 + 1;
    }

    // required bool supportsAltitude = 6;
    if (has_supportsaltitude()) {
      total_size += 1 + 1;
    }

    // required bool supportsSpeed = 7;
    if (has_supportsspeed()) {
      total_size += 1 + 1;
    }

    // required bool supportsBearing = 8;
    if (has_supportsbearing()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 powerRequirement = 9;
    if (has_powerrequirement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->powerrequirement());
    }

    // required int32 accuracy = 10;
    if (has_accuracy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->accuracy());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocationProviderInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LocationProviderInfo*>(&from));
}

void LocationProviderInfo::MergeFrom(const LocationProviderInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_provider()) {
      set_provider(from.provider());
    }
    if (from.has_requiresnetwork()) {
      set_requiresnetwork(from.requiresnetwork());
    }
    if (from.has_requiressatellite()) {
      set_requiressatellite(from.requiressatellite());
    }
    if (from.has_requirescell()) {
      set_requirescell(from.requirescell());
    }
    if (from.has_hasmonetarycost()) {
      set_hasmonetarycost(from.hasmonetarycost());
    }
    if (from.has_supportsaltitude()) {
      set_supportsaltitude(from.supportsaltitude());
    }
    if (from.has_supportsspeed()) {
      set_supportsspeed(from.supportsspeed());
    }
    if (from.has_supportsbearing()) {
      set_supportsbearing(from.supportsbearing());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_powerrequirement()) {
      set_powerrequirement(from.powerrequirement());
    }
    if (from.has_accuracy()) {
      set_accuracy(from.accuracy());
    }
  }
}

void LocationProviderInfo::CopyFrom(const LocationProviderInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocationProviderInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;

  return true;
}

void LocationProviderInfo::Swap(LocationProviderInfo* other) {
  if (other != this) {
    std::swap(provider_, other->provider_);
    std::swap(requiresnetwork_, other->requiresnetwork_);
    std::swap(requiressatellite_, other->requiressatellite_);
    std::swap(requirescell_, other->requirescell_);
    std::swap(hasmonetarycost_, other->hasmonetarycost_);
    std::swap(supportsaltitude_, other->supportsaltitude_);
    std::swap(supportsspeed_, other->supportsspeed_);
    std::swap(supportsbearing_, other->supportsbearing_);
    std::swap(powerrequirement_, other->powerrequirement_);
    std::swap(accuracy_, other->accuracy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LocationProviderInfo::GetTypeName() const {
  return "svmp.LocationProviderInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int LocationProviderStatus_Tuple::kKeyFieldNumber;
const int LocationProviderStatus_Tuple::kValueFieldNumber;
#endif  // !_MSC_VER

LocationProviderStatus_Tuple::LocationProviderStatus_Tuple()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void LocationProviderStatus_Tuple::InitAsDefaultInstance() {
}

LocationProviderStatus_Tuple::LocationProviderStatus_Tuple(const LocationProviderStatus_Tuple& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void LocationProviderStatus_Tuple::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LocationProviderStatus_Tuple::~LocationProviderStatus_Tuple() {
  SharedDtor();
}

void LocationProviderStatus_Tuple::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LocationProviderStatus_Tuple::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LocationProviderStatus_Tuple& LocationProviderStatus_Tuple::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_svmp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_svmp_2eproto();
#endif
  return *default_instance_;
}

LocationProviderStatus_Tuple* LocationProviderStatus_Tuple::default_instance_ = NULL;

LocationProviderStatus_Tuple* LocationProviderStatus_Tuple::New() const {
  return new LocationProviderStatus_Tuple;
}

void LocationProviderStatus_Tuple::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool LocationProviderStatus_Tuple::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LocationProviderStatus_Tuple::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

}

int LocationProviderStatus_Tuple::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocationProviderStatus_Tuple::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LocationProviderStatus_Tuple*>(&from));
}

void LocationProviderStatus_Tuple::MergeFrom(const LocationProviderStatus_Tuple& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
}

void LocationProviderStatus_Tuple::CopyFrom(const LocationProviderStatus_Tuple& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocationProviderStatus_Tuple::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LocationProviderStatus_Tuple::Swap(LocationProviderStatus_Tuple* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LocationProviderStatus_Tuple::GetTypeName() const {
  return "svmp.LocationProviderStatus.Tuple";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int LocationProviderStatus::kProviderFieldNumber;
const int LocationProviderStatus::kStatusFieldNumber;
const int LocationProviderStatus::kExtrasFieldNumber;
#endif  // !_MSC_VER

LocationProviderStatus::LocationProviderStatus()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void LocationProviderStatus::InitAsDefaultInstance() {
}

LocationProviderStatus::LocationProviderStatus(const LocationProviderStatus& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void LocationProviderStatus::SharedCtor() {
  _cached_size_ = 0;
  provider_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LocationProviderStatus::~LocationProviderStatus() {
  SharedDtor();
}

void LocationProviderStatus::SharedDtor() {
  if (provider_ != &::google::protobuf::internal::kEmptyString) {
    delete provider_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LocationProviderStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LocationProviderStatus& LocationProviderStatus::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_svmp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_svmp_2eproto();
#endif
  return *default_instance_;
}

LocationProviderStatus* LocationProviderStatus::default_instance_ = NULL;

LocationProviderStatus* LocationProviderStatus::New() const {
  return new LocationProviderStatus;
}

void LocationProviderStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_provider()) {
      if (provider_ != &::google::protobuf::internal::kEmptyString) {
        provider_->clear();
      }
    }
    status_ = 0;
  }
  extras_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool LocationProviderStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string provider = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_provider()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required int32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_extras;
        break;
      }

      // repeated .svmp.LocationProviderStatus.Tuple extras = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extras:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_extras()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_extras;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LocationProviderStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string provider = 1;
  if (has_provider()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->provider(), output);
  }

  // required int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

  // repeated .svmp.LocationProviderStatus.Tuple extras = 3;
  for (int i = 0; i < this->extras_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->extras(i), output);
  }

}

int LocationProviderStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string provider = 1;
    if (has_provider()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->provider());
    }

    // required int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  // repeated .svmp.LocationProviderStatus.Tuple extras = 3;
  total_size += 1 * this->extras_size();
  for (int i = 0; i < this->extras_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->extras(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocationProviderStatus::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LocationProviderStatus*>(&from));
}

void LocationProviderStatus::MergeFrom(const LocationProviderStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  extras_.MergeFrom(from.extras_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_provider()) {
      set_provider(from.provider());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
}

void LocationProviderStatus::CopyFrom(const LocationProviderStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocationProviderStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < extras_size(); i++) {
    if (!this->extras(i).IsInitialized()) return false;
  }
  return true;
}

void LocationProviderStatus::Swap(LocationProviderStatus* other) {
  if (other != this) {
    std::swap(provider_, other->provider_);
    std::swap(status_, other->status_);
    extras_.Swap(&other->extras_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LocationProviderStatus::GetTypeName() const {
  return "svmp.LocationProviderStatus";
}


// ===================================================================

#ifndef _MSC_VER
const int LocationProviderEnabled::kProviderFieldNumber;
const int LocationProviderEnabled::kEnabledFieldNumber;
#endif  // !_MSC_VER

LocationProviderEnabled::LocationProviderEnabled()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void LocationProviderEnabled::InitAsDefaultInstance() {
}

LocationProviderEnabled::LocationProviderEnabled(const LocationProviderEnabled& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void LocationProviderEnabled::SharedCtor() {
  _cached_size_ = 0;
  provider_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  enabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LocationProviderEnabled::~LocationProviderEnabled() {
  SharedDtor();
}

void LocationProviderEnabled::SharedDtor() {
  if (provider_ != &::google::protobuf::internal::kEmptyString) {
    delete provider_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LocationProviderEnabled::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LocationProviderEnabled& LocationProviderEnabled::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_svmp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_svmp_2eproto();
#endif
  return *default_instance_;
}

LocationProviderEnabled* LocationProviderEnabled::default_instance_ = NULL;

LocationProviderEnabled* LocationProviderEnabled::New() const {
  return new LocationProviderEnabled;
}

void LocationProviderEnabled::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_provider()) {
      if (provider_ != &::google::protobuf::internal::kEmptyString) {
        provider_->clear();
      }
    }
    enabled_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool LocationProviderEnabled::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string provider = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_provider()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_enabled;
        break;
      }

      // required bool enabled = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
          set_has_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LocationProviderEnabled::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string provider = 1;
  if (has_provider()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->provider(), output);
  }

  // required bool enabled = 2;
  if (has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->enabled(), output);
  }

}

int LocationProviderEnabled::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string provider = 1;
    if (has_provider()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->provider());
    }

    // required bool enabled = 2;
    if (has_enabled()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocationProviderEnabled::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LocationProviderEnabled*>(&from));
}

void LocationProviderEnabled::MergeFrom(const LocationProviderEnabled& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_provider()) {
      set_provider(from.provider());
    }
    if (from.has_enabled()) {
      set_enabled(from.enabled());
    }
  }
}

void LocationProviderEnabled::CopyFrom(const LocationProviderEnabled& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocationProviderEnabled::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LocationProviderEnabled::Swap(LocationProviderEnabled* other) {
  if (other != this) {
    std::swap(provider_, other->provider_);
    std::swap(enabled_, other->enabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LocationProviderEnabled::GetTypeName() const {
  return "svmp.LocationProviderEnabled";
}


// ===================================================================

#ifndef _MSC_VER
const int LocationUpdate::kLatitudeFieldNumber;
const int LocationUpdate::kLongitudeFieldNumber;
const int LocationUpdate::kTimeFieldNumber;
const int LocationUpdate::kProviderFieldNumber;
const int LocationUpdate::kAccuracyFieldNumber;
const int LocationUpdate::kAltitudeFieldNumber;
const int LocationUpdate::kBearingFieldNumber;
const int LocationUpdate::kSpeedFieldNumber;
#endif  // !_MSC_VER

LocationUpdate::LocationUpdate()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void LocationUpdate::InitAsDefaultInstance() {
}

LocationUpdate::LocationUpdate(const LocationUpdate& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void LocationUpdate::SharedCtor() {
  _cached_size_ = 0;
  latitude_ = 0;
  longitude_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  provider_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  accuracy_ = 0;
  altitude_ = 0;
  bearing_ = 0;
  speed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LocationUpdate::~LocationUpdate() {
  SharedDtor();
}

void LocationUpdate::SharedDtor() {
  if (provider_ != &::google::protobuf::internal::kEmptyString) {
    delete provider_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LocationUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LocationUpdate& LocationUpdate::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_svmp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_svmp_2eproto();
#endif
  return *default_instance_;
}

LocationUpdate* LocationUpdate::default_instance_ = NULL;

LocationUpdate* LocationUpdate::New() const {
  return new LocationUpdate;
}

void LocationUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    latitude_ = 0;
    longitude_ = 0;
    time_ = GOOGLE_LONGLONG(0);
    if (has_provider()) {
      if (provider_ != &::google::protobuf::internal::kEmptyString) {
        provider_->clear();
      }
    }
    accuracy_ = 0;
    altitude_ = 0;
    bearing_ = 0;
    speed_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool LocationUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double latitude = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_longitude;
        break;
      }

      // required double longitude = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // required int64 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_provider;
        break;
      }

      // optional string provider = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_provider:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_provider()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_accuracy;
        break;
      }

      // optional float accuracy = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_accuracy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &accuracy_)));
          set_has_accuracy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_altitude;
        break;
      }

      // optional double altitude = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_altitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &altitude_)));
          set_has_altitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_bearing;
        break;
      }

      // optional float bearing = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bearing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bearing_)));
          set_has_bearing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_speed;
        break;
      }

      // optional float speed = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LocationUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double latitude = 1;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->latitude(), output);
  }

  // required double longitude = 2;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->longitude(), output);
  }

  // required int64 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->time(), output);
  }

  // optional string provider = 4;
  if (has_provider()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->provider(), output);
  }

  // optional float accuracy = 5;
  if (has_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->accuracy(), output);
  }

  // optional double altitude = 6;
  if (has_altitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->altitude(), output);
  }

  // optional float bearing = 7;
  if (has_bearing()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->bearing(), output);
  }

  // optional float speed = 8;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->speed(), output);
  }

}

int LocationUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double latitude = 1;
    if (has_latitude()) {
      total_size += 1 + 8;
    }

    // required double longitude = 2;
    if (has_longitude()) {
      total_size += 1 + 8;
    }

    // required int64 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // optional string provider = 4;
    if (has_provider()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->provider());
    }

    // optional float accuracy = 5;
    if (has_accuracy()) {
      total_size += 1 + 4;
    }

    // optional double altitude = 6;
    if (has_altitude()) {
      total_size += 1 + 8;
    }

    // optional float bearing = 7;
    if (has_bearing()) {
      total_size += 1 + 4;
    }

    // optional float speed = 8;
    if (has_speed()) {
      total_size += 1 + 4;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocationUpdate::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LocationUpdate*>(&from));
}

void LocationUpdate::MergeFrom(const LocationUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_provider()) {
      set_provider(from.provider());
    }
    if (from.has_accuracy()) {
      set_accuracy(from.accuracy());
    }
    if (from.has_altitude()) {
      set_altitude(from.altitude());
    }
    if (from.has_bearing()) {
      set_bearing(from.bearing());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
  }
}

void LocationUpdate::CopyFrom(const LocationUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocationUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void LocationUpdate::Swap(LocationUpdate* other) {
  if (other != this) {
    std::swap(latitude_, other->latitude_);
    std::swap(longitude_, other->longitude_);
    std::swap(time_, other->time_);
    std::swap(provider_, other->provider_);
    std::swap(accuracy_, other->accuracy_);
    std::swap(altitude_, other->altitude_);
    std::swap(bearing_, other->bearing_);
    std::swap(speed_, other->speed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LocationUpdate::GetTypeName() const {
  return "svmp.LocationUpdate";
}


// ===================================================================

bool LocationRequest_LocationRequestType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LocationRequest_LocationRequestType LocationRequest::PROVIDERINFO;
const LocationRequest_LocationRequestType LocationRequest::PROVIDERSTATUS;
const LocationRequest_LocationRequestType LocationRequest::PROVIDERENABLED;
const LocationRequest_LocationRequestType LocationRequest::LOCATIONUPDATE;
const LocationRequest_LocationRequestType LocationRequest::LocationRequestType_MIN;
const LocationRequest_LocationRequestType LocationRequest::LocationRequestType_MAX;
const int LocationRequest::LocationRequestType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LocationRequest::kTypeFieldNumber;
const int LocationRequest::kProviderInfoFieldNumber;
const int LocationRequest::kProviderStatusFieldNumber;
const int LocationRequest::kProviderEnabledFieldNumber;
const int LocationRequest::kUpdateFieldNumber;
#endif  // !_MSC_VER

LocationRequest::LocationRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void LocationRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  providerinfo_ = const_cast< ::svmp::LocationProviderInfo*>(
      ::svmp::LocationProviderInfo::internal_default_instance());
#else
  providerinfo_ = const_cast< ::svmp::LocationProviderInfo*>(&::svmp::LocationProviderInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  providerstatus_ = const_cast< ::svmp::LocationProviderStatus*>(
      ::svmp::LocationProviderStatus::internal_default_instance());
#else
  providerstatus_ = const_cast< ::svmp::LocationProviderStatus*>(&::svmp::LocationProviderStatus::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  providerenabled_ = const_cast< ::svmp::LocationProviderEnabled*>(
      ::svmp::LocationProviderEnabled::internal_default_instance());
#else
  providerenabled_ = const_cast< ::svmp::LocationProviderEnabled*>(&::svmp::LocationProviderEnabled::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  update_ = const_cast< ::svmp::LocationUpdate*>(
      ::svmp::LocationUpdate::internal_default_instance());
#else
  update_ = const_cast< ::svmp::LocationUpdate*>(&::svmp::LocationUpdate::default_instance());
#endif
}

LocationRequest::LocationRequest(const LocationRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void LocationRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  providerinfo_ = NULL;
  providerstatus_ = NULL;
  providerenabled_ = NULL;
  update_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LocationRequest::~LocationRequest() {
  SharedDtor();
}

void LocationRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete providerinfo_;
    delete providerstatus_;
    delete providerenabled_;
    delete update_;
  }
}

void LocationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LocationRequest& LocationRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_svmp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_svmp_2eproto();
#endif
  return *default_instance_;
}

LocationRequest* LocationRequest::default_instance_ = NULL;

LocationRequest* LocationRequest::New() const {
  return new LocationRequest;
}

void LocationRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_providerinfo()) {
      if (providerinfo_ != NULL) providerinfo_->::svmp::LocationProviderInfo::Clear();
    }
    if (has_providerstatus()) {
      if (providerstatus_ != NULL) providerstatus_->::svmp::LocationProviderStatus::Clear();
    }
    if (has_providerenabled()) {
      if (providerenabled_ != NULL) providerenabled_->::svmp::LocationProviderEnabled::Clear();
    }
    if (has_update()) {
      if (update_ != NULL) update_->::svmp::LocationUpdate::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool LocationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .svmp.LocationRequest.LocationRequestType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::svmp::LocationRequest_LocationRequestType_IsValid(value)) {
            set_type(static_cast< ::svmp::LocationRequest_LocationRequestType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_providerInfo;
        break;
      }

      // optional .svmp.LocationProviderInfo providerInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_providerInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_providerinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_providerStatus;
        break;
      }

      // optional .svmp.LocationProviderStatus providerStatus = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_providerStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_providerstatus()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_providerEnabled;
        break;
      }

      // optional .svmp.LocationProviderEnabled providerEnabled = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_providerEnabled:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_providerenabled()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_update;
        break;
      }

      // optional .svmp.LocationUpdate update = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_update:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LocationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .svmp.LocationRequest.LocationRequestType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .svmp.LocationProviderInfo providerInfo = 2;
  if (has_providerinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->providerinfo(), output);
  }

  // optional .svmp.LocationProviderStatus providerStatus = 3;
  if (has_providerstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->providerstatus(), output);
  }

  // optional .svmp.LocationProviderEnabled providerEnabled = 4;
  if (has_providerenabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->providerenabled(), output);
  }

  // optional .svmp.LocationUpdate update = 5;
  if (has_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->update(), output);
  }

}

int LocationRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .svmp.LocationRequest.LocationRequestType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .svmp.LocationProviderInfo providerInfo = 2;
    if (has_providerinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->providerinfo());
    }

    // optional .svmp.LocationProviderStatus providerStatus = 3;
    if (has_providerstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->providerstatus());
    }

    // optional .svmp.LocationProviderEnabled providerEnabled = 4;
    if (has_providerenabled()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->providerenabled());
    }

    // optional .svmp.LocationUpdate update = 5;
    if (has_update()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->update());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocationRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LocationRequest*>(&from));
}

void LocationRequest::MergeFrom(const LocationRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_providerinfo()) {
      mutable_providerinfo()->::svmp::LocationProviderInfo::MergeFrom(from.providerinfo());
    }
    if (from.has_providerstatus()) {
      mutable_providerstatus()->::svmp::LocationProviderStatus::MergeFrom(from.providerstatus());
    }
    if (from.has_providerenabled()) {
      mutable_providerenabled()->::svmp::LocationProviderEnabled::MergeFrom(from.providerenabled());
    }
    if (from.has_update()) {
      mutable_update()->::svmp::LocationUpdate::MergeFrom(from.update());
    }
  }
}

void LocationRequest::CopyFrom(const LocationRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocationRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_providerinfo()) {
    if (!this->providerinfo().IsInitialized()) return false;
  }
  if (has_providerstatus()) {
    if (!this->providerstatus().IsInitialized()) return false;
  }
  if (has_providerenabled()) {
    if (!this->providerenabled().IsInitialized()) return false;
  }
  if (has_update()) {
    if (!this->update().IsInitialized()) return false;
  }
  return true;
}

void LocationRequest::Swap(LocationRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(providerinfo_, other->providerinfo_);
    std::swap(providerstatus_, other->providerstatus_);
    std::swap(providerenabled_, other->providerenabled_);
    std::swap(update_, other->update_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LocationRequest::GetTypeName() const {
  return "svmp.LocationRequest";
}


// ===================================================================

bool LocationSubscribe_LocationSubscribeType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LocationSubscribe_LocationSubscribeType LocationSubscribe::SINGLE_UPDATE;
const LocationSubscribe_LocationSubscribeType LocationSubscribe::MULTIPLE_UPDATES;
const LocationSubscribe_LocationSubscribeType LocationSubscribe::LocationSubscribeType_MIN;
const LocationSubscribe_LocationSubscribeType LocationSubscribe::LocationSubscribeType_MAX;
const int LocationSubscribe::LocationSubscribeType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LocationSubscribe::kTypeFieldNumber;
const int LocationSubscribe::kProviderFieldNumber;
const int LocationSubscribe::kMinTimeFieldNumber;
const int LocationSubscribe::kMinDistanceFieldNumber;
#endif  // !_MSC_VER

LocationSubscribe::LocationSubscribe()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void LocationSubscribe::InitAsDefaultInstance() {
}

LocationSubscribe::LocationSubscribe(const LocationSubscribe& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void LocationSubscribe::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  provider_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mintime_ = GOOGLE_LONGLONG(0);
  mindistance_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LocationSubscribe::~LocationSubscribe() {
  SharedDtor();
}

void LocationSubscribe::SharedDtor() {
  if (provider_ != &::google::protobuf::internal::kEmptyString) {
    delete provider_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LocationSubscribe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LocationSubscribe& LocationSubscribe::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_svmp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_svmp_2eproto();
#endif
  return *default_instance_;
}

LocationSubscribe* LocationSubscribe::default_instance_ = NULL;

LocationSubscribe* LocationSubscribe::New() const {
  return new LocationSubscribe;
}

void LocationSubscribe::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_provider()) {
      if (provider_ != &::google::protobuf::internal::kEmptyString) {
        provider_->clear();
      }
    }
    mintime_ = GOOGLE_LONGLONG(0);
    mindistance_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool LocationSubscribe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .svmp.LocationSubscribe.LocationSubscribeType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::svmp::LocationSubscribe_LocationSubscribeType_IsValid(value)) {
            set_type(static_cast< ::svmp::LocationSubscribe_LocationSubscribeType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_provider;
        break;
      }

      // required string provider = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_provider:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_provider()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_minTime;
        break;
      }

      // optional int64 minTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mintime_)));
          set_has_mintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_minDistance;
        break;
      }

      // optional float minDistance = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_minDistance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mindistance_)));
          set_has_mindistance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LocationSubscribe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .svmp.LocationSubscribe.LocationSubscribeType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required string provider = 2;
  if (has_provider()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->provider(), output);
  }

  // optional int64 minTime = 3;
  if (has_mintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->mintime(), output);
  }

  // optional float minDistance = 4;
  if (has_mindistance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->mindistance(), output);
  }

}

int LocationSubscribe::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .svmp.LocationSubscribe.LocationSubscribeType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required string provider = 2;
    if (has_provider()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->provider());
    }

    // optional int64 minTime = 3;
    if (has_mintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mintime());
    }

    // optional float minDistance = 4;
    if (has_mindistance()) {
      total_size += 1 + 4;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocationSubscribe::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LocationSubscribe*>(&from));
}

void LocationSubscribe::MergeFrom(const LocationSubscribe& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_provider()) {
      set_provider(from.provider());
    }
    if (from.has_mintime()) {
      set_mintime(from.mintime());
    }
    if (from.has_mindistance()) {
      set_mindistance(from.mindistance());
    }
  }
}

void LocationSubscribe::CopyFrom(const LocationSubscribe& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocationSubscribe::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LocationSubscribe::Swap(LocationSubscribe* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(provider_, other->provider_);
    std::swap(mintime_, other->mintime_);
    std::swap(mindistance_, other->mindistance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LocationSubscribe::GetTypeName() const {
  return "svmp.LocationSubscribe";
}


// ===================================================================

#ifndef _MSC_VER
const int LocationUnsubscribe::kProviderFieldNumber;
#endif  // !_MSC_VER

LocationUnsubscribe::LocationUnsubscribe()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void LocationUnsubscribe::InitAsDefaultInstance() {
}

LocationUnsubscribe::LocationUnsubscribe(const LocationUnsubscribe& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void LocationUnsubscribe::SharedCtor() {
  _cached_size_ = 0;
  provider_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LocationUnsubscribe::~LocationUnsubscribe() {
  SharedDtor();
}

void LocationUnsubscribe::SharedDtor() {
  if (provider_ != &::google::protobuf::internal::kEmptyString) {
    delete provider_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LocationUnsubscribe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LocationUnsubscribe& LocationUnsubscribe::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_svmp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_svmp_2eproto();
#endif
  return *default_instance_;
}

LocationUnsubscribe* LocationUnsubscribe::default_instance_ = NULL;

LocationUnsubscribe* LocationUnsubscribe::New() const {
  return new LocationUnsubscribe;
}

void LocationUnsubscribe::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_provider()) {
      if (provider_ != &::google::protobuf::internal::kEmptyString) {
        provider_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool LocationUnsubscribe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string provider = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_provider()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LocationUnsubscribe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string provider = 1;
  if (has_provider()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->provider(), output);
  }

}

int LocationUnsubscribe::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string provider = 1;
    if (has_provider()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->provider());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocationUnsubscribe::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LocationUnsubscribe*>(&from));
}

void LocationUnsubscribe::MergeFrom(const LocationUnsubscribe& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_provider()) {
      set_provider(from.provider());
    }
  }
}

void LocationUnsubscribe::CopyFrom(const LocationUnsubscribe& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocationUnsubscribe::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LocationUnsubscribe::Swap(LocationUnsubscribe* other) {
  if (other != this) {
    std::swap(provider_, other->provider_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LocationUnsubscribe::GetTypeName() const {
  return "svmp.LocationUnsubscribe";
}


// ===================================================================

bool LocationResponse_LocationResponseType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LocationResponse_LocationResponseType LocationResponse::SUBSCRIBE;
const LocationResponse_LocationResponseType LocationResponse::UNSUBSCRIBE;
const LocationResponse_LocationResponseType LocationResponse::LocationResponseType_MIN;
const LocationResponse_LocationResponseType LocationResponse::LocationResponseType_MAX;
const int LocationResponse::LocationResponseType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LocationResponse::kTypeFieldNumber;
const int LocationResponse::kSubscribeFieldNumber;
const int LocationResponse::kUnsubscribeFieldNumber;
#endif  // !_MSC_VER

LocationResponse::LocationResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void LocationResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  subscribe_ = const_cast< ::svmp::LocationSubscribe*>(
      ::svmp::LocationSubscribe::internal_default_instance());
#else
  subscribe_ = const_cast< ::svmp::LocationSubscribe*>(&::svmp::LocationSubscribe::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  unsubscribe_ = const_cast< ::svmp::LocationUnsubscribe*>(
      ::svmp::LocationUnsubscribe::internal_default_instance());
#else
  unsubscribe_ = const_cast< ::svmp::LocationUnsubscribe*>(&::svmp::LocationUnsubscribe::default_instance());
#endif
}

LocationResponse::LocationResponse(const LocationResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void LocationResponse::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  subscribe_ = NULL;
  unsubscribe_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LocationResponse::~LocationResponse() {
  SharedDtor();
}

void LocationResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete subscribe_;
    delete unsubscribe_;
  }
}

void LocationResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LocationResponse& LocationResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_svmp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_svmp_2eproto();
#endif
  return *default_instance_;
}

LocationResponse* LocationResponse::default_instance_ = NULL;

LocationResponse* LocationResponse::New() const {
  return new LocationResponse;
}

void LocationResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_subscribe()) {
      if (subscribe_ != NULL) subscribe_->::svmp::LocationSubscribe::Clear();
    }
    if (has_unsubscribe()) {
      if (unsubscribe_ != NULL) unsubscribe_->::svmp::LocationUnsubscribe::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool LocationResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .svmp.LocationResponse.LocationResponseType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::svmp::LocationResponse_LocationResponseType_IsValid(value)) {
            set_type(static_cast< ::svmp::LocationResponse_LocationResponseType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_subscribe;
        break;
      }

      // optional .svmp.LocationSubscribe subscribe = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subscribe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_subscribe()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_unsubscribe;
        break;
      }

      // optional .svmp.LocationUnsubscribe unsubscribe = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unsubscribe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unsubscribe()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LocationResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .svmp.LocationResponse.LocationResponseType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .svmp.LocationSubscribe subscribe = 2;
  if (has_subscribe()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->subscribe(), output);
  }

  // optional .svmp.LocationUnsubscribe unsubscribe = 3;
  if (has_unsubscribe()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->unsubscribe(), output);
  }

}

int LocationResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .svmp.LocationResponse.LocationResponseType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .svmp.LocationSubscribe subscribe = 2;
    if (has_subscribe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->subscribe());
    }

    // optional .svmp.LocationUnsubscribe unsubscribe = 3;
    if (has_unsubscribe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unsubscribe());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocationResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LocationResponse*>(&from));
}

void LocationResponse::MergeFrom(const LocationResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_subscribe()) {
      mutable_subscribe()->::svmp::LocationSubscribe::MergeFrom(from.subscribe());
    }
    if (from.has_unsubscribe()) {
      mutable_unsubscribe()->::svmp::LocationUnsubscribe::MergeFrom(from.unsubscribe());
    }
  }
}

void LocationResponse::CopyFrom(const LocationResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocationResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_subscribe()) {
    if (!this->subscribe().IsInitialized()) return false;
  }
  if (has_unsubscribe()) {
    if (!this->unsubscribe().IsInitialized()) return false;
  }
  return true;
}

void LocationResponse::Swap(LocationResponse* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(subscribe_, other->subscribe_);
    std::swap(unsubscribe_, other->unsubscribe_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LocationResponse::GetTypeName() const {
  return "svmp.LocationResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int Authentication::kUnFieldNumber;
const int Authentication::kPwFieldNumber;
#endif  // !_MSC_VER

Authentication::Authentication()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Authentication::InitAsDefaultInstance() {
}

Authentication::Authentication(const Authentication& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Authentication::SharedCtor() {
  _cached_size_ = 0;
  un_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pw_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Authentication::~Authentication() {
  SharedDtor();
}

void Authentication::SharedDtor() {
  if (un_ != &::google::protobuf::internal::kEmptyString) {
    delete un_;
  }
  if (pw_ != &::google::protobuf::internal::kEmptyString) {
    delete pw_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Authentication::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Authentication& Authentication::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_svmp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_svmp_2eproto();
#endif
  return *default_instance_;
}

Authentication* Authentication::default_instance_ = NULL;

Authentication* Authentication::New() const {
  return new Authentication;
}

void Authentication::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_un()) {
      if (un_ != &::google::protobuf::internal::kEmptyString) {
        un_->clear();
      }
    }
    if (has_pw()) {
      if (pw_ != &::google::protobuf::internal::kEmptyString) {
        pw_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Authentication::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string un = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_un()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pw;
        break;
      }

      // required string pw = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pw()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Authentication::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string un = 1;
  if (has_un()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->un(), output);
  }

  // required string pw = 2;
  if (has_pw()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pw(), output);
  }

}

int Authentication::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string un = 1;
    if (has_un()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->un());
    }

    // required string pw = 2;
    if (has_pw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pw());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Authentication::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Authentication*>(&from));
}

void Authentication::MergeFrom(const Authentication& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_un()) {
      set_un(from.un());
    }
    if (from.has_pw()) {
      set_pw(from.pw());
    }
  }
}

void Authentication::CopyFrom(const Authentication& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Authentication::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Authentication::Swap(Authentication* other) {
  if (other != this) {
    std::swap(un_, other->un_);
    std::swap(pw_, other->pw_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Authentication::GetTypeName() const {
  return "svmp.Authentication";
}


// ===================================================================

#ifndef _MSC_VER
const int VideoRequest::kIpFieldNumber;
const int VideoRequest::kPortFieldNumber;
const int VideoRequest::kBitrateFieldNumber;
#endif  // !_MSC_VER

VideoRequest::VideoRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void VideoRequest::InitAsDefaultInstance() {
}

VideoRequest::VideoRequest(const VideoRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void VideoRequest::SharedCtor() {
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  bitrate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VideoRequest::~VideoRequest() {
  SharedDtor();
}

void VideoRequest::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void VideoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VideoRequest& VideoRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_svmp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_svmp_2eproto();
#endif
  return *default_instance_;
}

VideoRequest* VideoRequest::default_instance_ = NULL;

VideoRequest* VideoRequest::New() const {
  return new VideoRequest;
}

void VideoRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0;
    bitrate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool VideoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // required int32 port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bitrate;
        break;
      }

      // optional int32 bitrate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bitrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bitrate_)));
          set_has_bitrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VideoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ip(), output);
  }

  // required int32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  // optional int32 bitrate = 3;
  if (has_bitrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bitrate(), output);
  }

}

int VideoRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // required int32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional int32 bitrate = 3;
    if (has_bitrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bitrate());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VideoRequest*>(&from));
}

void VideoRequest::MergeFrom(const VideoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_bitrate()) {
      set_bitrate(from.bitrate());
    }
  }
}

void VideoRequest::CopyFrom(const VideoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void VideoRequest::Swap(VideoRequest* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(bitrate_, other->bitrate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string VideoRequest::GetTypeName() const {
  return "svmp.VideoRequest";
}


// ===================================================================

bool WebRTCMessage_WebRTCType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const WebRTCMessage_WebRTCType WebRTCMessage::OFFER;
const WebRTCMessage_WebRTCType WebRTCMessage::ANSWER;
const WebRTCMessage_WebRTCType WebRTCMessage::CANDIDATE;
const WebRTCMessage_WebRTCType WebRTCMessage::BYE;
const WebRTCMessage_WebRTCType WebRTCMessage::WebRTCType_MIN;
const WebRTCMessage_WebRTCType WebRTCMessage::WebRTCType_MAX;
const int WebRTCMessage::WebRTCType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int WebRTCMessage::kTypeFieldNumber;
const int WebRTCMessage::kSdpFieldNumber;
const int WebRTCMessage::kIdFieldNumber;
const int WebRTCMessage::kLabalFieldNumber;
const int WebRTCMessage::kCandidateFieldNumber;
#endif  // !_MSC_VER

WebRTCMessage::WebRTCMessage()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void WebRTCMessage::InitAsDefaultInstance() {
}

WebRTCMessage::WebRTCMessage(const WebRTCMessage& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void WebRTCMessage::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  sdp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  labal_ = 0;
  candidate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WebRTCMessage::~WebRTCMessage() {
  SharedDtor();
}

void WebRTCMessage::SharedDtor() {
  if (sdp_ != &::google::protobuf::internal::kEmptyString) {
    delete sdp_;
  }
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (candidate_ != &::google::protobuf::internal::kEmptyString) {
    delete candidate_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void WebRTCMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const WebRTCMessage& WebRTCMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_svmp_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_svmp_2eproto();
#endif
  return *default_instance_;
}

WebRTCMessage* WebRTCMessage::default_instance_ = NULL;

WebRTCMessage* WebRTCMessage::New() const {
  return new WebRTCMessage;
}

void WebRTCMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_sdp()) {
      if (sdp_ != &::google::protobuf::internal::kEmptyString) {
        sdp_->clear();
      }
    }
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    labal_ = 0;
    if (has_candidate()) {
      if (candidate_ != &::google::protobuf::internal::kEmptyString) {
        candidate_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool WebRTCMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .svmp.WebRTCMessage.WebRTCType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::svmp::WebRTCMessage_WebRTCType_IsValid(value)) {
            set_type(static_cast< ::svmp::WebRTCMessage_WebRTCType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sdp;
        break;
      }

      // optional string sdp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sdp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sdp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_id;
        break;
      }

      // optional string id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_labal;
        break;
      }

      // optional int32 labal = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_labal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &labal_)));
          set_has_labal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_candidate;
        break;
      }

      // optional string candidate = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_candidate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_candidate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WebRTCMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .svmp.WebRTCMessage.WebRTCType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string sdp = 2;
  if (has_sdp()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sdp(), output);
  }

  // optional string id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->id(), output);
  }

  // optional int32 labal = 4;
  if (has_labal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->labal(), output);
  }

  // optional string candidate = 5;
  if (has_candidate()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->candidate(), output);
  }

}

int WebRTCMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .svmp.WebRTCMessage.WebRTCType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string sdp = 2;
    if (has_sdp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sdp());
    }

    // optional string id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional int32 labal = 4;
    if (has_labal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->labal());
    }

    // optional string candidate = 5;
    if (has_candidate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->candidate());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WebRTCMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const WebRTCMessage*>(&from));
}

void WebRTCMessage::MergeFrom(const WebRTCMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_sdp()) {
      set_sdp(from.sdp());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_labal()) {
      set_labal(from.labal());
    }
    if (from.has_candidate()) {
      set_candidate(from.candidate());
    }
  }
}

void WebRTCMessage::CopyFrom(const WebRTCMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebRTCMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WebRTCMessage::Swap(WebRTCMessage* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(sdp_, other->sdp_);
    std::swap(id_, other->id_);
    std::swap(labal_, other->labal_);
    std::swap(candidate_, other->candidate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string WebRTCMessage::GetTypeName() const {
  return "svmp.WebRTCMessage";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace svmp

// @@protoc_insertion_point(global_scope)
